{"version":3,"file":"static/js/1883.3556e787.chunk.js","mappings":"+NAiFA,UA7Ec,WACZ,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAMA,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,UAAC,KAAD,YACE,4CADF,KAC+B,yBAE/B,UAAC,KAAD,YACE,eAAGA,UAAU,6BAAb,4BACgB,mDADhB,iBAC8E,KAC5E,2CAFF,QAIA,UAAC,KAAD,CAAaC,KAAK,cAAlB,WACE,SAAC,KAAD,CAAYC,QAAQ,eAApB,4BACA,SAAC,KAAD,CAAYC,GAAG,6BAKvB,SAAC,KAAD,CAAMJ,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,UAAC,KAAD,YACE,4CADF,KAC+B,4CAE/B,UAAC,KAAD,YACE,eAAGA,UAAU,6BAAb,sBACU,uCADV,mGAIA,UAAC,KAAD,CAAaC,KAAK,uBAAlB,WACE,SAAC,KAAD,CAAYC,QAAQ,gBAApB,6BACA,SAAC,KAAD,CAAYC,GAAG,gBAAgBC,UAAQ,gBAK/C,SAAC,KAAD,CAAML,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,UAAC,KAAD,YACE,4CADF,KAC+B,+CAE/B,UAAC,KAAD,YACE,eAAGA,UAAU,6BAAb,oDACwC,kCADxC,SAC6D,kCAD7D,UAEE,gCAFF,SAEqB,kCAFrB,mEAGkB,kCAHlB,SAGuC,kCAHvC,mBAKA,UAAC,KAAD,CAAaC,KAAK,0BAAlB,WACE,SAAC,KAAD,CAAYC,QAAQ,eAApB,4BACA,SAAC,KAAD,CAAYG,IAAI,IAAIC,IAAI,IAAIC,aAAa,IAAIJ,GAAG,6BAKxD,SAAC,KAAD,CAAMJ,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,UAAC,KAAD,YACE,4CADF,KAC+B,yCAE/B,UAAC,KAAD,YACE,eAAGA,UAAU,6BAAb,mGAEY,mCAFZ,yEAGW,yCAHX,QAKA,UAAC,KAAD,CAAaC,KAAK,oBAAlB,WACE,SAAC,KAAD,CAAYC,QAAQ,eAApB,4BACA,SAAC,KAAD,CAAYG,IAAI,IAAIC,IAAI,IAAIE,KAAK,MAAMD,aAAa,IAAIJ,GAAG,8BAOxE,C","sources":["views/forms/range/Range.js"],"sourcesContent":["import React from 'react'\nimport { CCard, CCardBody, CCardHeader, CCol, CFormLabel, CFormRange, CRow } from '@coreui/react'\nimport { DocsExample } from 'src/components'\n\nconst Range = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small></small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Create custom <code>&lt;input type=&#34;range&#34;&gt;</code> controls with{' '}\n              <code>&lt;CFormRange&gt;</code>.\n            </p>\n            <DocsExample href=\"forms/range\">\n              <CFormLabel htmlFor=\"customRange1\">Example range</CFormLabel>\n              <CFormRange id=\"customRange1\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Add the <code>disabled</code> boolean attribute on an input to give it a grayed out\n              appearance and remove pointer events.\n            </p>\n            <DocsExample href=\"forms/range#disabled\">\n              <CFormLabel htmlFor=\"disabledRange\">Disabled range</CFormLabel>\n              <CFormRange id=\"disabledRange\" disabled />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Min and max</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Range inputs have implicit values for <code>min</code> and <code>max</code>â€”\n              <code>0</code> and <code>100</code>, respectively. You may specify new values for\n              those using the <code>min</code> and <code>max</code> attributes.\n            </p>\n            <DocsExample href=\"forms/range#min-and-max\">\n              <CFormLabel htmlFor=\"customRange2\">Example range</CFormLabel>\n              <CFormRange min=\"0\" max=\"5\" defaultValue=\"3\" id=\"customRange2\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Steps</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              By default, range inputs &#34;snap&#34; to integer values. To change this, you can\n              specify a <code>step</code> value. In the example below, we double the number of steps\n              by using <code>step=&#34;0.5&#34;</code>.\n            </p>\n            <DocsExample href=\"forms/range#steps\">\n              <CFormLabel htmlFor=\"customRange3\">Example range</CFormLabel>\n              <CFormRange min=\"0\" max=\"5\" step=\"0.5\" defaultValue=\"3\" id=\"customRange3\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Range\n"],"names":["xs","className","href","htmlFor","id","disabled","min","max","defaultValue","step"],"sourceRoot":""}